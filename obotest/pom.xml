<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.qfree.obotest</groupId>
	<artifactId>obotest</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>obotest</name>

	<modules>
		<module>../obotest-ear</module>
		<module>../obotest-ejb</module>
		<module>../obotest-ejb-client</module>
		<module>../obotest-servlets</module>
		<module>../obotest-config</module>
<!--		<module>../obotest-unittest-outofserver</module> -->
		<module>../obotest-unittest-inserver</module>
		<module>../obotest-unittest-embeddedserver</module>
	</modules>

	<properties>
		<slf4j.version>1.7.7</slf4j.version>
		<logback.version>1.0.13</logback.version>
		<junit.version>4.11</junit.version>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<glassfish.home>/home/jeffreyz/Applications/java/glassfish4</glassfish.home>
	</properties>

	<dependencies>

		<!--
			Logging.
			
			Note that scope is "provided". This means that each child module can
			use logging, but these dependencies will not be packaged in those 
			modules. There are similar dependencies in the "obotest-ear" 
			module so that these dependencies will, in fact, be packaged there,
			in the /lib directory of the EAR.
		-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>provided</scope>
		</dependency>
	
		<!-- Unit tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>provided</scope>
		</dependency>
		
	</dependencies>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>javax</groupId>
				<artifactId>javaee-api</artifactId>
				<version>7.0</version>
				<scope>provided</scope>
			</dependency>
			
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
			
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
	
				<!-- 
					We explicitly turn on unit testing in the modules where we want
					unit tests to run during a build based on this parent pom.
					The reason why I take this approach is that we do not want to 
					automatically run unit tests that are based on in-container 
					testing since the EAR will not get deployed until after it is
					built.
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.17</version>
					<configuration>
						<skipTests>true</skipTests>
						<!-- <testFailureIgnore>true</testFailureIgnore> -->
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-report-plugin</artifactId>
					<version>2.17</version>
				</plugin>
	
			</plugins>
		</pluginManagement>
	</build>

</project>
